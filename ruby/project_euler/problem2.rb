# Even Fibonacci numbers
#
# Each new term in the Fibonacci sequence is generated by adding the previous two terms.
# By starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# 
# By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

module Euler
  class Problem2
    INITIAL_FIBO = [1, 2]
    FOUR_MILLION = 4_000_000

    class << self
      def fibonacci(term)
        INITIAL_FIBO.tap do |arr|
          while arr.size < term
            arr << arr[-2] + arr[-1]
          end
        end
      end

      def find_biggest_term_upto(biggest)
        INITIAL_FIBO.tap do |arr|
          while arr.last < biggest
            arr << arr[-2] + arr[-1]
          end
        end.size - 1
      end

      def sum_of_even_terms_of_fibonacci(term)
        fibonacci(term).select {|n| n.even? }.inject(&:+)
      end
    end
  end
end
